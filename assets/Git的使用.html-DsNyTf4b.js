import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as n,b as e,f as s,d as t,w as l,r as p,o as h}from"./app-I1vn1Y0-.js";const c={};function o(g,i){const a=p("font");return h(),r("div",null,[i[8]||(i[8]=n(`<h1 id="git的使用" tabindex="-1"><a class="header-anchor" href="#git的使用"><span>Git的使用</span></a></h1><h2 id="一-git-概述" tabindex="-1"><a class="header-anchor" href="#一-git-概述"><span>一. Git 概述</span></a></h2><h3 id="_1-1-常用的linux命令" tabindex="-1"><a class="header-anchor" href="#_1-1-常用的linux命令"><span>1.1 常用的Linux命令</span></a></h3><blockquote><p>cd 文件名 //表示进入某个目录 cd .. //表示返回上一级 pwd //显示当前所在的目录路径</p><p>ll -a //显示当前文件夹的所有文件，包含隐藏文件</p><p>ls(ll) //显示当前文件夹下的所有文件，两个ll显示的更详细</p><p>cat a.js //可以查看a.js的内容</p><p>touch a.js //创建一个a.js的文件 mkdir Test //创建一个Test文件夹</p><p>rm a.js //删除a.js指定文件 rm -i a.js //根据提示是否删除a.js的文件(Y/N)</p><p>rm -r Test //删除Test文件夹</p><p>mv a.js Test //将a.js移动到Test文件夹中</p><p>clear //清屏</p><p>history //查看历史使用的命令</p><p>exit //退出</p></blockquote><h3 id="_1-2-概述与下载" tabindex="-1"><a class="header-anchor" href="#_1-2-概述与下载"><span>1.2 概述与下载</span></a></h3><h4 id="_1-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-2-1-概述"><span>1.2.1 概述</span></a></h4><ul><li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li><li>分为本地仓库和远程仓库</li><li>.git 隐藏文件夹就是版本库，存在不同的更新版本迭代</li></ul><h4 id="_1-2-2-安装git" tabindex="-1"><a class="header-anchor" href="#_1-2-2-安装git"><span>1.2.2 安装git</span></a></h4><p>​ 将<strong>Git-2.25.1-64-bit.exe</strong>文件直接无脑下一步即可</p><h3 id="_1-3-常用关键词" tabindex="-1"><a class="header-anchor" href="#_1-3-常用关键词"><span>1.3 常用关键词</span></a></h3><p>​ 暂存区(类似于购物车)：所有在本地仓库增删改的文件都在暂存区没有保存在本地 ​ 本地仓库：就是本地的一个仓库 ​ 远程仓库：就是需要提交到Gitee上面的远程仓库</p><p>​ Clone ：克隆 ，将远程仓库复制到本地仓库 ​ Push：推送，将本地仓库上传到远程仓库 ​ Pull：拉取，将远程仓库代码下载到本地仓库</p><h3 id="_1-4-工作流程" tabindex="-1"><a class="header-anchor" href="#_1-4-工作流程"><span>1.4 工作流程</span></a></h3><p>​ add =&gt; commit =&gt; push (先add到暂存区，然后commit到本地仓库，最后再push到远程仓库)</p><p>​ 1．从远程仓库中克隆代码到本地仓库 ​ 2．从本地仓库中checkout代码然后进行代码修改 ​ 3．在提交前先将代码提交到暂存区 ​ 4．提交到本地仓库。本地仓库中保存修改的各个历史版本 ​ 5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</p><h3 id="_1-5-git-常用命令" tabindex="-1"><a class="header-anchor" href="#_1-5-git-常用命令"><span>1.5 Git 常用命令</span></a></h3><h4 id="_1-5-1-配置相关" tabindex="-1"><a class="header-anchor" href="#_1-5-1-配置相关"><span>1.5.1 配置相关</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git config --global user.name &quot;Eobard&quot;					//配置自己gitee的昵称</span></span>
<span class="line"><span>git config --global user.email 2209473452@qq.com		//配置自己gitee的邮箱</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git config -l  											//查看配置</span></span>
<span class="line"><span>git config --system --list								//查看系统config</span></span>
<span class="line"><span>git config --global  --list								//查看当前用户（global）配置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-2-add命令" tabindex="-1"><a class="header-anchor" href="#_1-5-2-add命令"><span>1.5.2 add命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git add  index.html				//添加index.html文件到暂存区</span></span>
<span class="line"><span>git add .						//添加所有文件到暂存区(有个.)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-3-commit命令" tabindex="-1"><a class="header-anchor" href="#_1-5-3-commit命令"><span>1.5.3 commit命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git commit -m 	&quot;自定义信息...&quot;			//提交暂存区的所有文件到本地仓库</span></span>
<span class="line"><span>git commit -m 	&quot;自定义信息...&quot;   a.js	//提交暂存区的a.js到本地仓库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-4-push命令" tabindex="-1"><a class="header-anchor" href="#_1-5-4-push命令"><span>1.5.4 push命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git push origin [本地分支名]:新建分支名或远程分支名。  	# 如果不加本地分支名，默认把当前激活的分支推送到远程指定分支名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git push origin master					//将本地仓库的master主分支提交到别名为origin的远程仓库</span></span>
<span class="line"><span>git push origin dev						//将本地仓库的dev分支提交到别名为origin的远程仓库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-5-pull、fetch命令" tabindex="-1"><a class="header-anchor" href="#_1-5-5-pull、fetch命令"><span>1.5.5 pull、fetch命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git pull origin master							//从别名为origin的远程仓库的主分区拉取文件到本地仓库</span></span>
<span class="line"><span>git pull --rebase origin master			//从别名为origin的远程仓库的主分支拉取新增加文件到本地仓库，两种写法</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>git fetch 		//从远程仓库获取更新。不会修改当前的工作目录或分支，只是把远程的提交、分支、标签等信息下载到本地</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-6-分支命令" tabindex="-1"><a class="header-anchor" href="#_1-5-6-分支命令"><span>1.5.6 分支命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git branch								//查看本地分支</span></span>
<span class="line"><span>git branch -r							//查看远程分支</span></span>
<span class="line"><span>git branch dev							//创建一个名为dev的本地分支(若需要同步到远程仓库需要push)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git branch -d dev						//删除名为dev的分支</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>git checkout 指定分支名称 				//切换到指定分支,不同的分支,文件的内容也不一样</span></span>
<span class="line"><span>										 //(若要切换为主分支，直接git checkout master 即可)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-7-merge命令" tabindex="-1"><a class="header-anchor" href="#_1-5-7-merge命令"><span>1.5.7 merge命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git merge 分支名						//将指定分支名的代码 合并到当前激活的分支中</span></span>
<span class="line"><span>									  //(注意:合并到谁就要首先切换到谁）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-8-remote-命令" tabindex="-1"><a class="header-anchor" href="#_1-5-8-remote-命令"><span>1.5.8 remote 命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git remote -v				//可以查看远程仓库的别名，用于push和pull</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git remote add 别名 url	  //给远程仓库取一个别名,下次push和pull的时候就可以不用填写url,写别名即可</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-9-其它命令" tabindex="-1"><a class="header-anchor" href="#_1-5-9-其它命令"><span>1.5.9 其它命令</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git status										//查看文件状态或查看冲突文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git reflog										//查看历史修改版本信息											</span></span>
<span class="line"><span>git log											//可以查看历史修改版本详细信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-10-tag命令" tabindex="-1"><a class="header-anchor" href="#_1-5-10-tag命令"><span>1.5.10 tag命令</span></a></h4><blockquote><p>添加tag一定是commit之后的内容，即你本地仓库提交的内容</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git add . </span></span>
<span class="line"><span>git commit -m &#39;..&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git tag 标签名</span></span>
<span class="line"><span>git push origin 标签名  //这时候相当于tag是最新的代码，你的本地仓库也是最新的代码，但是远程分支上是旧的，这时候你也可以git push 把最新的代码也同步上去</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-大致流程-重点" tabindex="-1"><a class="header-anchor" href="#_1-6-大致流程-重点"><span>1.6 大致流程(重点)</span></a></h3><p>clone =》开发 =》add =》commit =》pull =》push</p><ul><li>首先克隆项目</li><li>自己开发</li><li>增加开发的代码到本地仓库</li><li>提交</li><li>推送之前先拉取远程仓库最新代码</li><li>最后推送</li></ul><hr><h2 id="二-git-本地仓库使用" tabindex="-1"><a class="header-anchor" href="#二-git-本地仓库使用"><span>二. Git 本地仓库使用</span></a></h2><h3 id="_2-1-创建版本库" tabindex="-1"><a class="header-anchor" href="#_2-1-创建版本库"><span>2.1 创建版本库</span></a></h3><p>​ a. 在相应的文件夹里面，右键选择<strong>Git Bash Here</strong> 即可；</p><p>​ b. 然后使用命令初始化版本库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ c. 就会显示出 .git 文件夹(默认隐藏)</p><h3 id="_2-2-增删改版本库的文件" tabindex="-1"><a class="header-anchor" href="#_2-2-增删改版本库的文件"><span>2.2 增删改版本库的文件</span></a></h3><p>​ a. 在之前相应的文件夹里面，任意的增删改文件之后都要添加到暂存区</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git add .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ b. 将暂存区的内容提交到本地仓库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git commit -m &quot;增删改了文件&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ <mark>注意：1.在版本库中不管是增加、删除、修改文件都一定要提交,不然版本库不会作出变动，</mark></p><p>​ <mark>2.添加/提交单个文件最好加上文件名：<strong>git add 文件名</strong>/ <strong>git commit -m &quot;信息&quot; 文件名</strong></mark></p><h3 id="_2-3-版本穿梭" tabindex="-1"><a class="header-anchor" href="#_2-3-版本穿梭"><span>2.3 版本穿梭</span></a></h3><p>​ （1）第一步：首先通过命令查看各个版本号，并记录下版本号</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git reflog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ （2）第二步：将刚刚的版本号复制，通过命令实现穿梭</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git reset --hard 版本号</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="三-git-远程仓库" tabindex="-1"><a class="header-anchor" href="#三-git-远程仓库"><span>三. Git 远程仓库</span></a></h2><h3 id="_3-1-配置ssh协议" tabindex="-1"><a class="header-anchor" href="#_3-1-配置ssh协议"><span>3.1 配置SSH协议</span></a></h3><p>​ （1）第一步：注册码云 https://gitee.com/signup 并 完善个人信息</p><p>​ （2）第二步：在个人信息找到设置，选择SSH公钥</p><p>​ （3）第三步：根据自己的用户名在自己的电脑找到C:\\Users\\九龙坡郭富城 文件夹里</p><p>​ （4）第四步：右键空白选择以Git Bash Here 运行，然后用命令创建文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir .ssh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ （5）第五步：继续使用命令创建密钥</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ssh-keygen -t rsa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意：会出现让你输入的情况直接按下回车即可，直到会出现rsa3072出现即可</mark></p><p>​ （6）第六步：然后进入.ssh文件夹，把里面的id_rsa.pub里面的东西复制到gitee的SSH公钥中复制进去；<strong>若没有标题随意写即可</strong></p><h3 id="_3-2-创建远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-2-创建远程仓库"><span>3.2 创建远程仓库</span></a></h3><p>​ 在码云登录进去之后，直接创建仓库，然后根据相应信息填写即可</p><h3 id="_3-3-本地仓库关联远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-3-本地仓库关联远程仓库"><span>3.3 本地仓库关联远程仓库</span></a></h3><h4 id="_3-3-1-方法1-关联远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-3-1-方法1-关联远程仓库"><span>3.3.1 方法1:关联远程仓库</span></a></h4><p>​ （1）第一步：在相应的文件夹里，右键选择<strong>Git Bash Here</strong>通过命令初始化版本库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ （2）第二步：通过命令将本地仓库与远程仓库建立联系</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git remote add origin 远程仓库URL地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意：这里创建了一个origin的别名，下一次从远程仓库pull或者push的时候就可以直接用别名了，就可以省略url</mark></p><p>​ （3）第三步：如果 gitee 仓库创建的时候有 README.MD 文件，则先拉取代码；<strong>如果远程仓库是空的则跳过此步</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git pull  origin master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ <mark>注意：如果远程仓库是空仓库，就不要执行这条命令，否则会出错</mark></p><p>​ （4）第四步：通过命令测试与远程仓库的连接；然后 在本地仓库增删改各种文件并提交到本地仓库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git remote -v</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意：与远程仓库连接成功之后，创建了相应的文件别忘了提交和拉取到远程仓库</mark></p><h4 id="_3-3-2-方法2-克隆空仓库" tabindex="-1"><a class="header-anchor" href="#_3-3-2-方法2-克隆空仓库"><span>3.3.2 方法2:克隆空仓库</span></a></h4><p>​ （1）第一步：在码云创建仓库，然后根据相应信息填写即可，并且复制远程仓库的url</p><p>​ （2）第二步： 在相应的文件夹里，右键选择<strong>Git Bash Here</strong>通过命令克隆远程仓库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git clone url</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-4-将本地仓库推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-4-将本地仓库推送到远程仓库"><span>3.4 将本地仓库推送到远程仓库</span></a></h3><p>​ 将增删改的本地文件提交到本地仓库，然后通过push本地仓库的master分支到别名为origin远程仓库里面去</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git push  origin master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意一点：1.推送的时候是以分支为单位，即 <strong>git push 别名 分支名</strong></mark></p><p>​ <mark>2. 如果要想推送其它分支，首先在本地仓库切换为其它分支，然后再推送即可，远程仓库会自动创建对应的分支接收文件</mark></p><h3 id="_3-5-忽略文件推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-5-忽略文件推送到远程仓库"><span>3.5 忽略文件推送到远程仓库</span></a></h3>`,96)),e("p",null,[i[2]||(i[2]=s("​ 并不是所有文件都要提交，如idea中的 xxx.imp 、out文件夹、.idea文件夹、target文件夹等就要忽略，我们可以建立 ")),e("strong",null,[t(a,{color:"red"},{default:l(()=>i[0]||(i[0]=[s(".gitignore")])),_:1})]),i[3]||(i[3]=s(" 文件可以忽略指定的文件添加到仓库中，")),t(a,{color:"darkgreen"},{default:l(()=>i[1]||(i[1]=[s("注意创建 "),e("strong",null,".gitignore",-1),s("文件应该在和**.git**文件同级下")])),_:1})]),i[9]||(i[9]=n(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>##常用的排除规则(#代表注释)</span></span>
<span class="line"><span>	*.txt       			 #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span>
<span class="line"><span>	!lib.txt     			 #但lib.txt除外</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	/temp        			 #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span>
<span class="line"><span>	build/      	 	   	 #忽略build/目录下的所有文件</span></span>
<span class="line"><span>	doc/*.txt    			 #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的 .gitignore文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># Eclipse Project Files</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.classpath</span></span>
<span class="line"><span>.project</span></span>
<span class="line"><span>.settings/</span></span>
<span class="line"><span>.idea/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># IntelliJ IDEA Files</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*.iml</span></span>
<span class="line"><span>*.ipr</span></span>
<span class="line"><span>*.iws</span></span>
<span class="line"><span>*.idea</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Build Artifacts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.gradle/</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span>target/</span></span>
<span class="line"><span>bin/</span></span>
<span class="line"><span>*.class</span></span>
<span class="line"><span>*.log</span></span>
<span class="line"><span>*.war</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-拉取远程仓库代码" tabindex="-1"><a class="header-anchor" href="#_3-6-拉取远程仓库代码"><span>3.6 拉取远程仓库代码</span></a></h3><p>​ 在当前本地仓库中使用命令从别名为origin的主分区拉取，就会拉取与当前本地仓库不一样的文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git pull origin master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意一点：1.拉取的时候也是以分支为单位，即 <strong>git pull 别名 分支名</strong></mark></p><p>​ <mark>2. 若想要把远程仓库的其它分支拉取到本地仓库的其它分支，同样需要在本地仓库先切换为其它分支，再拉取</mark></p><hr><h2 id="四-分支管理" tabindex="-1"><a class="header-anchor" href="#四-分支管理"><span>四. 分支管理</span></a></h2><h3 id="_4-1-创建分支" tabindex="-1"><a class="header-anchor" href="#_4-1-创建分支"><span>4.1 创建分支</span></a></h3><p>​ 在相应的文件夹下右键选择<strong>Git Bash Here</strong>通过命令创建分支</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git branch dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ <mark>注意：用创建分支的命令，会将当前分支的内容复制给新的分支</mark></p><h3 id="_4-2-切换分支" tabindex="-1"><a class="header-anchor" href="#_4-2-切换分支"><span>4.2 切换分支</span></a></h3><p>​ 在相应的文件夹下右键选择<strong>Git Bash Here</strong>通过命令切换分支</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git checkout dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-3-合并分支" tabindex="-1"><a class="header-anchor" href="#_4-3-合并分支"><span>4.3 合并分支</span></a></h3>`,18)),e("p",null,[i[5]||(i[5]=s("​ ")),t(a,{color:"red"},{default:l(()=>i[4]||(i[4]=[s("正常合并：对于同一个文件来说，当其中一个分支未修改，另外一个分支修改时，可以正常合并")])),_:1})]),i[10]||(i[10]=n('<p>​ 在相应的文件夹下右键选择<strong>Git Bash Here</strong>通过命令合并分支</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git merge dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意：1.将dev分支的文件合并到主分支</mark></p><p>​ <strong><mark>2. 其他分支合并到谁就要首先切换到谁</mark></strong></p><h3 id="_4-4-解决冲突" tabindex="-1"><a class="header-anchor" href="#_4-4-解决冲突"><span>4.4 解决冲突</span></a></h3>',5)),e("p",null,[i[7]||(i[7]=s("​ ")),t(a,{color:"red"},{default:l(()=>i[6]||(i[6]=[s("冲突：对于同一个文件来说，两个分支中编辑的内容相互独立，如果在两个分支中都对同一个文件进行编辑，然后再合并，会有很大几率出现冲突")])),_:1})]),i[11]||(i[11]=n(`<p>​ （1）第一步：切换到主分支</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git checkout master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ （2）第二步：合并其它分支</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git merge dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意：merge后面是其它分支名</mark></p><p>​ （3）第三步：会有冲突提示：Auto-merging HelloWorld.java CONFLICT (content): Merge conflict in HelloWorld.java Automatic merge failed; fix conflicts and then commit the result.</p><p>​ （4）第四步：查看冲突文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> git status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ （5）第五步：根据提示打开对应的文件</p><p>​ （6）第六步：根据需求修改冲突文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt;&gt;&gt;&gt;上面是当前分支（也就是master）的代码=======</span></span>
<span class="line"><span>=======下面是要合并进来的分支的代码，两者发生了冲突。&lt;&lt;&lt;&lt;</span></span>
<span class="line"><span>	此时，分析两段的代码是实现相同功能而写的重复的代码还是各自实现的不同的功能的代码。</span></span>
<span class="line"><span>		如果是重复代码：两个二选一删除一个，然后再把这些冲突标示符删除即可；</span></span>
<span class="line"><span>		如果不是重复代码，两个都需要保留，只把冲突符号删除即可。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ （7）第七步：重新在主分支添加新修改的文件并提交到远程仓库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git add .</span></span>
<span class="line"><span>git commit -m &quot;修改冲突文件&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意：<strong>这时候提交就不能这么写会报错</strong> git commit -m &quot;提示&quot; 文件名</mark></p><p>​</p><h3 id="_4-5-更新分支" tabindex="-1"><a class="header-anchor" href="#_4-5-更新分支"><span>4.5 更新分支</span></a></h3><p>​ 从刚刚的解决冲突之后可以知道，这样做只会让主分区的文件合并成新的，但是其它分区还是原来的</p><blockquote><p>​ 解决：</p><p>​ 1.切换到主分区</p><p>​ 2(可选).将主分区从远程仓库pull下来 //如果本地仓库和远程仓库不一致就要pull</p><p>​ 3.切换到其他分区</p><p>​ 4.git merge master</p><p>​ 5(可选).最后提交到远程 //如果需要将远程仓库的分支也更新，就提交</p></blockquote><hr><h2 id="五-idea使用git" tabindex="-1"><a class="header-anchor" href="#五-idea使用git"><span>五. IDEA使用Git</span></a></h2><h3 id="_5-1-方式1-推荐" tabindex="-1"><a class="header-anchor" href="#_5-1-方式1-推荐"><span>5.1 方式1 (推荐)</span></a></h3><p>​ 1.打开设置找到version control 找到里面的git 点击测试，出现sucsessfully就可以了 ​ 2.创建项目，打开工具栏的VCS选择导入到版本控制选择create git repository即可，选择当前项目的文件夹(如果是微服务项目，就要选顶层文件夹)</p><h3 id="_5-2-方式2-万能" tabindex="-1"><a class="header-anchor" href="#_5-2-方式2-万能"><span>5.2 方式2( 万能)</span></a></h3><p>​ 1.首先从远程clone项目下来，若没有项目可以在gitee上新建一个仓库然后通过命令克隆到本地某个位置 ​ 2.创建idea项目，并把刚刚克隆下来的文件里面的所有文件剪切到idea项目的根路径即可 ​ 3.然后就可以在idea中使用git了 在下面的terminal就可以使用命令了</p><h3 id="_5-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-3-注意事项"><span>5.3 注意事项</span></a></h3><p>​ 1.无论是方式1还是方式2，如果没有.gitignore文件要自己创建在项目中，即和src平级，在里面配置不想要提交的文件 ​ 2.Idea中有许多方式可以提交，图形化界面就用右上角的绿色√ ​ 3.idea克隆项目：在idea创建项目那里有个git from version control的选项，选择然后输入url即可 ​ <strong>4.可以在控制台的terminal终端的log中可以切换以往的版本</strong></p><p>​ <strong>5.idea右下角的git：master就可以知道当前是什么分支，并且可以创建新的分支，还可以合并分支，遇到冲突在弹出的界面选择merge(手动解决冲突代码即可)</strong></p><p>​ <strong>6.可以将idea的项目直接推送到远程仓库，不需要提前在远程仓库建立仓库；</strong></p><blockquote><p>首先安装gitee的插件，然后打开菜单栏的vcs =&gt; 导入到版本控制 =&gt; share project on gitee 即可</p></blockquote><hr>`,30))])}const m=d(c,[["render",o]]),v=JSON.parse('{"path":"/tools/Git%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"Git的使用","lang":"zh-CN","frontmatter":{"description":"Git的使用 一. Git 概述 1.1 常用的Linux命令 cd 文件名 //表示进入某个目录 cd .. //表示返回上一级 pwd //显示当前所在的目录路径 ll -a //显示当前文件夹的所有文件，包含隐藏文件 ls(ll) //显示当前文件夹下的所有文件，两个ll显示的更详细 cat a.js //可以查看a.js的内容 touch a....","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/tools/Git%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"九龙坡郭富城的博客"}],["meta",{"property":"og:title","content":"Git的使用"}],["meta",{"property":"og:description","content":"Git的使用 一. Git 概述 1.1 常用的Linux命令 cd 文件名 //表示进入某个目录 cd .. //表示返回上一级 pwd //显示当前所在的目录路径 ll -a //显示当前文件夹的所有文件，包含隐藏文件 ls(ll) //显示当前文件夹下的所有文件，两个ll显示的更详细 cat a.js //可以查看a.js的内容 touch a...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-26T14:53:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-26T14:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git的使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-26T14:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Eobard Thawne\\",\\"url\\":\\"https://gitee.com/eobard721\\"}]}"]]},"headers":[{"level":2,"title":"一. Git 概述","slug":"一-git-概述","link":"#一-git-概述","children":[{"level":3,"title":"1.1 常用的Linux命令","slug":"_1-1-常用的linux命令","link":"#_1-1-常用的linux命令","children":[]},{"level":3,"title":"1.2 概述与下载","slug":"_1-2-概述与下载","link":"#_1-2-概述与下载","children":[]},{"level":3,"title":"1.3 常用关键词","slug":"_1-3-常用关键词","link":"#_1-3-常用关键词","children":[]},{"level":3,"title":"1.4 工作流程","slug":"_1-4-工作流程","link":"#_1-4-工作流程","children":[]},{"level":3,"title":"1.5 Git 常用命令","slug":"_1-5-git-常用命令","link":"#_1-5-git-常用命令","children":[]},{"level":3,"title":"1.6 大致流程(重点)","slug":"_1-6-大致流程-重点","link":"#_1-6-大致流程-重点","children":[]}]},{"level":2,"title":"二. Git 本地仓库使用","slug":"二-git-本地仓库使用","link":"#二-git-本地仓库使用","children":[{"level":3,"title":"2.1 创建版本库","slug":"_2-1-创建版本库","link":"#_2-1-创建版本库","children":[]},{"level":3,"title":"2.2 增删改版本库的文件","slug":"_2-2-增删改版本库的文件","link":"#_2-2-增删改版本库的文件","children":[]},{"level":3,"title":"2.3 版本穿梭","slug":"_2-3-版本穿梭","link":"#_2-3-版本穿梭","children":[]}]},{"level":2,"title":"三. Git 远程仓库","slug":"三-git-远程仓库","link":"#三-git-远程仓库","children":[{"level":3,"title":"3.1 配置SSH协议","slug":"_3-1-配置ssh协议","link":"#_3-1-配置ssh协议","children":[]},{"level":3,"title":"3.2 创建远程仓库","slug":"_3-2-创建远程仓库","link":"#_3-2-创建远程仓库","children":[]},{"level":3,"title":"3.3 本地仓库关联远程仓库","slug":"_3-3-本地仓库关联远程仓库","link":"#_3-3-本地仓库关联远程仓库","children":[]},{"level":3,"title":"3.4 将本地仓库推送到远程仓库","slug":"_3-4-将本地仓库推送到远程仓库","link":"#_3-4-将本地仓库推送到远程仓库","children":[]},{"level":3,"title":"3.5 忽略文件推送到远程仓库","slug":"_3-5-忽略文件推送到远程仓库","link":"#_3-5-忽略文件推送到远程仓库","children":[]},{"level":3,"title":"3.6 拉取远程仓库代码","slug":"_3-6-拉取远程仓库代码","link":"#_3-6-拉取远程仓库代码","children":[]}]},{"level":2,"title":"四. 分支管理","slug":"四-分支管理","link":"#四-分支管理","children":[{"level":3,"title":"4.1 创建分支","slug":"_4-1-创建分支","link":"#_4-1-创建分支","children":[]},{"level":3,"title":"4.2 切换分支","slug":"_4-2-切换分支","link":"#_4-2-切换分支","children":[]},{"level":3,"title":"4.3 合并分支","slug":"_4-3-合并分支","link":"#_4-3-合并分支","children":[]},{"level":3,"title":"4.4 解决冲突","slug":"_4-4-解决冲突","link":"#_4-4-解决冲突","children":[]},{"level":3,"title":"4.5 更新分支","slug":"_4-5-更新分支","link":"#_4-5-更新分支","children":[]}]},{"level":2,"title":"五. IDEA使用Git","slug":"五-idea使用git","link":"#五-idea使用git","children":[{"level":3,"title":"5.1 方式1 (推荐)","slug":"_5-1-方式1-推荐","link":"#_5-1-方式1-推荐","children":[]},{"level":3,"title":"5.2 方式2( 万能)","slug":"_5-2-方式2-万能","link":"#_5-2-方式2-万能","children":[]},{"level":3,"title":"5.3 注意事项","slug":"_5-3-注意事项","link":"#_5-3-注意事项","children":[]}]}],"git":{"createdTime":1758898432000,"updatedTime":1758898432000,"contributors":[{"name":"Eobard","email":"2209473452@qq.com","commits":1}]},"readingTime":{"minutes":12.78,"words":3835},"filePathRelative":"tools/Git的使用.md","localizedDate":"2025年9月26日","excerpt":"\\n<h2>一. Git 概述</h2>\\n<h3>1.1 常用的Linux命令</h3>\\n<blockquote>\\n<p>cd  文件名   \\t\\t\\t\\t\\t\\t//表示进入某个目录\\ncd  ..\\t\\t\\t\\t \\t\\t\\t\\t\\t//表示返回上一级\\npwd\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t//显示当前所在的目录路径</p>\\n<p>ll -a\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t//显示当前文件夹的所有文件，包含隐藏文件</p>\\n<p>ls(ll) \\t\\t\\t\\t\\t\\t\\t\\t\\t//显示当前文件夹下的所有文件，两个ll显示的更详细</p>\\n<p>cat  a.js\\t\\t\\t\\t\\t\\t\\t\\t//可以查看a.js的内容</p>\\n<p>touch  a.js\\t\\t \\t\\t\\t\\t\\t//创建一个a.js的文件\\nmkdir\\tTest    \\t\\t\\t\\t\\t //创建一个Test文件夹</p>\\n<p>rm    a.js \\t\\t \\t\\t\\t\\t\\t\\t//删除a.js指定文件\\nrm -i   a.js\\t\\t\\t\\t\\t\\t\\t\\t//根据提示是否删除a.js的文件(Y/N)</p>\\n<p>rm -r Test\\t\\t\\t\\t\\t\\t\\t\\t//删除Test文件夹</p>\\n<p>mv a.js  Test \\t \\t\\t\\t\\t\\t //将a.js移动到Test文件夹中</p>\\n<p>clear \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t//清屏</p>\\n<p>history\\t\\t\\t\\t\\t\\t\\t\\t\\t//查看历史使用的命令</p>\\n<p>exit\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t//退出</p>\\n</blockquote>","autoDesc":true}');export{m as comp,v as data};
