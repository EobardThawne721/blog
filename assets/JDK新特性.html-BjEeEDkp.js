import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as l}from"./app-LbXpNSwh.js";const n={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="jdk新特性" tabindex="-1"><a class="header-anchor" href="#jdk新特性"><span>JDK新特性</span></a></h1><h2 id="jdk8" tabindex="-1"><a class="header-anchor" href="#jdk8"><span>jdk8</span></a></h2><h3 id="一-lambda表达式" tabindex="-1"><a class="header-anchor" href="#一-lambda表达式"><span>一.lambda表达式</span></a></h3><h4 id="_1-1-语法" tabindex="-1"><a class="header-anchor" href="#_1-1-语法"><span>1.1 语法</span></a></h4><p>​ 左侧是实现接口方法中的参数列表,右侧是表达式中所执行的功能</p><blockquote><p>两点注意：</p><ol><li>表达式需要&quot;函数式接口&quot;的支持: 即接口中只有一个抽象方法的接口称为函数式接口,可以在接口用注解@FunctionalInterface声明,表示该接口只能有一个抽象方法</li><li>是一个匿名函数，可以让代码更加简洁明了</li></ol></blockquote><h4 id="_1-2-四大内置函数式接口" tabindex="-1"><a class="header-anchor" href="#_1-2-四大内置函数式接口"><span>1.2 四大内置函数式接口</span></a></h4><ul><li><p><code>Consumer&lt;T&gt;</code>: <code>void accept(T t);</code> // 消费型接口,无返回值</p></li><li><p><code>Supplier&lt;T&gt;</code>: <code>T get();</code> // 供给型接口,返回T类型</p></li></ul><blockquote><p>供给型接口使用注意: 首先在方法中确定大致的功能，然后在接口中具体实现细节<br> (比如：实例人，首先方法中肯定先声明类对象，返回人这个对象，然后具体是什么样的人就在接口中用 new 一个类然后用构造方法就完成了)</p></blockquote><ul><li><p><code>Function&lt;T,R&gt;</code>: <code>R apply(T t);</code> // 函数型接口,传入T类型,返回一个R类型</p></li><li><p><code>Predicate&lt;T&gt;</code>: <code>boolean test(T t);</code> // 预判型接口,返回一个 boolean 值</p><ul><li><code>BiPredicate&lt;T, R&gt;</code>: <code>boolean test(T t, R r);</code> // 子类与预判型接口</li></ul></li></ul><p><code>使用方式: 方法1:直接用另一个方法让这个接口作为参数类型,然后调用就用lambda来完成接口的功能 方法2:直接声明接口然后实例lambda表达式,最后用声明接口的变量来调用抽象方法,根据返回值来接收结</code></p><h4 id="_1-3-其他用法" tabindex="-1"><a class="header-anchor" href="#_1-3-其他用法"><span>1.3 其他用法</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>当有接口并且里面有一个抽象方法时:</span></span>
<span class="line"><span>	new 接口名(){ </span></span>
<span class="line"><span>		//实现抽象方法</span></span>
<span class="line"><span>	}				//这就是匿名内部类可以用lambda表达式替换</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Comparator比较接口表达</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//正数表示升序,负数表示降序(就是后面条件返回的值,可以加上+,-号)	</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Comparator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">y)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x,y);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//比较两个数的大小</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Comparator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">y)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str2);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//按照字典来比较字符串的顺序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-stream流" tabindex="-1"><a class="header-anchor" href="#二-stream流"><span>二.Stream流</span></a></h3><h4 id="_2-1-创建流-三种方式" tabindex="-1"><a class="header-anchor" href="#_2-1-创建流-三种方式"><span>2.1 创建流(三种方式)</span></a></h4><ol><li>通过实例化 Collection 系列集合，用实例调用 <code>stream()</code> 返回一个 <code>Stream&lt;T&gt;</code> 对象 ==&gt; 获取一个集合流</li><li>通过 <code>Arrays.stream(T[] t)</code> 返回一个 <code>Stream&lt;T&gt;</code> 对象 ==&gt; 获取一个数组流</li><li>通过 <code>Stream.of(T... values)</code> 返回一个 <code>Stream&lt;T&gt;</code> 对象，这里的可变参数只写值，不用声明 ==&gt; 获取一个自定义值流</li></ol><h4 id="_2-2-常用中间操作" tabindex="-1"><a class="header-anchor" href="#_2-2-常用中间操作"><span>2.2 常用中间操作</span></a></h4><p>​ 中间的操作不会输出任何结果,只有在最后的终止操作才会输出新结果</p><h5 id="_2-2-1-过滤" tabindex="-1"><a class="header-anchor" href="#_2-2-1-过滤"><span>2.2.1 过滤</span></a></h5><p>​ 排除元素(只接收lambda形式)，首先让数据变成流对象,然后链式调用<strong>filter( (e)-&gt;e.条件表达式 )</strong>,返回一个新流对象接收。</p><blockquote><p>里面的lambda表达式是Function接口</p></blockquote><h5 id="_2-2-2-限制" tabindex="-1"><a class="header-anchor" href="#_2-2-2-限制"><span>2.2.2 限制</span></a></h5><p>​ 限制获取流中前L个元素，首先让数据变成流对象,然后链式调用<strong>limit(long L)</strong></p><h5 id="_2-2-3-跳过" tabindex="-1"><a class="header-anchor" href="#_2-2-3-跳过"><span>2.2.3 跳过</span></a></h5><p>​ 跳过前K个元素，首先让数据变成流对象,然后链式调用<strong>skip(long K)</strong></p><h5 id="_2-2-4-映射-★★★★" tabindex="-1"><a class="header-anchor" href="#_2-2-4-映射-★★★★"><span>2.2.4 映射(★★★★)</span></a></h5><p>​ 将元素转换成其他形式或者提取信息(只接受lambda)，首先让数据变成流对象,然后链式调用<strong>map((e)-&gt;e.表达式 )</strong></p><blockquote><p>里面的lambda表达式是Function接口</p></blockquote><h5 id="_2-2-5-排序-★★" tabindex="-1"><a class="header-anchor" href="#_2-2-5-排序-★★"><span>2.2.5 排序(★★)</span></a></h5><p>​ 将元素按照字典型排序，首先让数据变成流对象,然后链式调用 <strong>sorted()</strong> //自然排序</p><blockquote><p>sorted(Comparator 接口) //要么lambda表示自定义排序,要么匿名内部类形式自定义排序</p></blockquote><h5 id="_2-2-6-归约-★★★★" tabindex="-1"><a class="header-anchor" href="#_2-2-6-归约-★★★★"><span>2.2.6 归约(★★★★)</span></a></h5><p>​ 将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，首先让数据变成流对象,然后链式调用<strong>reduce(初始值,BiFunction&lt;T t1,T t2&gt;接口的lambda表达式 )</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//eg1:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	XXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,(x,y)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">y);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//计算初始值为0+x+y值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//eg2:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	XXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,Integer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sum)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 	//计算所有Integer的总值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-7-收集结果-★★" tabindex="-1"><a class="header-anchor" href="#_2-2-7-收集结果-★★"><span>2.2.7 收集结果(★★)</span></a></h5><p>​ 转换为一个新的集合，首先让数据变成流对象,然后链式调用<strong>map(筛选想要的).collect(XXX)</strong></p><blockquote><p><strong>XXX可以是下面这几种</strong></p><ul><li><strong>Collectors.toList() //返回一个List集合,可以重复元素</strong><ul><li><strong>Collectors.Set(); //返回一个set集合,不能重复元素</strong></li></ul></li><li><strong><code>Collectors.toCollection(Supplier&lt;T&gt;接口类型)</code> //返回自定义的类型,可在供给型接口具体写lambda表达式</strong></li></ul></blockquote><h5 id="_2-2-8-是否匹配条件" tabindex="-1"><a class="header-anchor" href="#_2-2-8-是否匹配条件"><span>2.2.8 是否匹配条件</span></a></h5><p>​ 首先让数据变成流对象,然后链式调用 <strong><code>anyMatch( Predicate&lt;T&gt;接口的lambda表达式)</code></strong> //返回boolean值</p><h5 id="_2-2-9-去重" tabindex="-1"><a class="header-anchor" href="#_2-2-9-去重"><span>2.2.9 去重</span></a></h5><p>​ 去掉重复的元素(必须让数据重写hashcode()和equals()才能去重)，首先让数据变成流对象,然后链式调用<strong>distinct()</strong></p><h4 id="_2-3-常用终止操作" tabindex="-1"><a class="header-anchor" href="#_2-3-常用终止操作"><span>2.3 常用终止操作</span></a></h4><p>​ 也称之为&quot;惰性求值&quot;，<strong>一次性执行中间操作的全部结果</strong></p><h5 id="_2-3-1-遍历-★★★★" tabindex="-1"><a class="header-anchor" href="#_2-3-1-遍历-★★★★"><span>2.3.1 遍历(★★★★ )</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//简单遍历</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e));</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//判断条件遍历</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(condition){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    			System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//链式调用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			 .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((e)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.条件表达式)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			 .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">limit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">								//取前面X条数据,可省略不写</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			 .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">println);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			//让foreach循环遍历有条件的List集合</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-2-获取第一个值" tabindex="-1"><a class="header-anchor" href="#_2-3-2-获取第一个值"><span>2.3.2 获取第一个值</span></a></h5><p>​ 中间操作接收的新流对象.findFirst();</p><blockquote><p><strong>返回一个<code>Optional&lt;T&gt;</code>的容器对象，取得里面的值直接调用get()方法即可</strong></p></blockquote><h5 id="_2-3-3-流中总个数" tabindex="-1"><a class="header-anchor" href="#_2-3-3-流中总个数"><span>2.3.3 流中总个数</span></a></h5><p>​ 中间操作接收的新流对象.count();</p><blockquote><p>求得流中的总个数,返回一个long类型</p></blockquote><h5 id="_2-3-4-流中的最大值" tabindex="-1"><a class="header-anchor" href="#_2-3-4-流中的最大值"><span>2.3.4 流中的最大值</span></a></h5><p>​ 中间操作接收的新流对象.max( Comparator&lt;T t,T t&gt;的lambda表达式 );</p><blockquote><p>返回一个<code>Optional&lt;T&gt;</code>的容器对象，取得里面的值直接调用get()方法即可</p></blockquote><h5 id="_2-3-5-流中的最小值" tabindex="-1"><a class="header-anchor" href="#_2-3-5-流中的最小值"><span>2.3.5 流中的最小值</span></a></h5><p>​ 中间操作接收的新流对象.min( Comparator&lt;T t,T t&gt;的lambda表达式 );</p><blockquote><p><strong>返回一个<code>Optional&lt;T&gt;</code>的容器对象，取得里面的值直接调用get()方法即可</strong></p></blockquote><p><mark>注意：若涉及到的计算量很大,或者任务多的时候,最好使用并行流 **parallelStream()<strong>或者</strong>parallel()**方法 ，多线程同时进行操作，可以让cpu其他核全部利用起来,而不同stream流是一个单核单线程运行，效率没有并行流高</mark></p><h3 id="三-接口的改动" tabindex="-1"><a class="header-anchor" href="#三-接口的改动"><span>三. 接口的改动</span></a></h3><h4 id="_3-1-区别" tabindex="-1"><a class="header-anchor" href="#_3-1-区别"><span>3.1 区别</span></a></h4><p>​ <strong>java8之前</strong>：接口只有静态常量和抽象方法</p><p>​ <strong>java8之后</strong>：接口可以有默认方法和静态方法,即可以有实现的方法</p><h4 id="_3-2-用法" tabindex="-1"><a class="header-anchor" href="#_3-2-用法"><span>3.2 用法</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	default</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> XXX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//具体实现代码块}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//接口名.xxx()调用该方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>若一个类实现某个接口,类中的方法和接口中的默认方法重名时,调用方法会优先调用类中的方法,即&quot;类优先原则&quot;</p></blockquote><h3 id="四-新时间api" tabindex="-1"><a class="header-anchor" href="#四-新时间api"><span>四. 新时间API</span></a></h3><p>​ <strong>全是不可变对象,线程安全,使用ISO-8601日期标准</strong></p><h4 id="_4-1-日期类" tabindex="-1"><a class="header-anchor" href="#_4-1-日期类"><span>4.1 日期类</span></a></h4><ul><li>LocalDate:本地日期类</li><li>LocalTime:本地时间类</li><li>LocalDateTime:本地日期时间类(★)</li></ul><blockquote><p>三者会一即可,方法一样的,推荐使用本地日期时间类</p></blockquote><p><code>创建当前时间实例(静态方法)</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">									//获取当前时间</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(year,month,day,hour,minute,second);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//获取自定义时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>改变时间</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">plusXXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//增加 年/月/日/时/分/秒; XXX:years/Months/....</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">minusXXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//减少</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>获取时间</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getYear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			//获取年</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMonthValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//获取月</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDayOfMonth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//获取日</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			//获取时</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMinute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//获取分</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-间隔" tabindex="-1"><a class="header-anchor" href="#_4-2-间隔"><span>4.2 间隔</span></a></h4><ul><li>Duration:计算两个&quot;时间&quot;的间隔</li><li>Period:计算两个&quot;日期&quot;的间隔</li></ul><p><code>&quot;时间&quot;间隔</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  du</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">between</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LocalTime时间实例1,LocalTime时间实例2);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">du</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">getXXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				//获取秒和纳秒</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">du</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">toMills</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //获取其他的类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&quot;日期&quot;间隔</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Period</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Period</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">between</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ldt1,ldt2);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">getXXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//获取想要的间隔</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-自定义格式化日期" tabindex="-1"><a class="header-anchor" href="#_4-3-自定义格式化日期"><span>4.3 自定义格式化日期</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ldt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DateTimeFormatter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dtf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DateTimeFormatter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofPattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dtf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ldt);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,86)]))}const d=s(n,[["render",e]]),r=JSON.parse('{"path":"/backend/standard/JDK%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"JDK新特性","lang":"zh-CN","frontmatter":{"description":"JDK新特性 jdk8 一.lambda表达式 1.1 语法 ​ 左侧是实现接口方法中的参数列表,右侧是表达式中所执行的功能 两点注意： 表达式需要\\"函数式接口\\"的支持: 即接口中只有一个抽象方法的接口称为函数式接口,可以在接口用注解@FunctionalInterface声明,表示该接口只能有一个抽象方法 是一个匿名函数，可以让代码更加简洁明了 1....","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/backend/standard/JDK%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"九龙坡郭富城的博客"}],["meta",{"property":"og:title","content":"JDK新特性"}],["meta",{"property":"og:description","content":"JDK新特性 jdk8 一.lambda表达式 1.1 语法 ​ 左侧是实现接口方法中的参数列表,右侧是表达式中所执行的功能 两点注意： 表达式需要\\"函数式接口\\"的支持: 即接口中只有一个抽象方法的接口称为函数式接口,可以在接口用注解@FunctionalInterface声明,表示该接口只能有一个抽象方法 是一个匿名函数，可以让代码更加简洁明了 1...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T10:33:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T10:33:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDK新特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-23T10:33:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Eobard Thawne\\",\\"url\\":\\"https://gitee.com/eobard721\\"}]}"]]},"headers":[{"level":2,"title":"jdk8","slug":"jdk8","link":"#jdk8","children":[{"level":3,"title":"一.lambda表达式","slug":"一-lambda表达式","link":"#一-lambda表达式","children":[]},{"level":3,"title":"二.Stream流","slug":"二-stream流","link":"#二-stream流","children":[]},{"level":3,"title":"三. 接口的改动","slug":"三-接口的改动","link":"#三-接口的改动","children":[]},{"level":3,"title":"四. 新时间API","slug":"四-新时间api","link":"#四-新时间api","children":[]}]}],"git":{"createdTime":1755945183000,"updatedTime":1755945183000,"contributors":[{"name":"Eobard","email":"2209473452@qq.com","commits":1}]},"readingTime":{"minutes":6.58,"words":1973},"filePathRelative":"backend/standard/JDK新特性.md","localizedDate":"2025年8月23日","excerpt":"\\n<h2>jdk8</h2>\\n<h3>一.lambda表达式</h3>\\n<h4>1.1 语法</h4>\\n<p>​\\t\\t\\t\\t左侧是实现接口方法中的参数列表,右侧是表达式中所执行的功能</p>\\n<blockquote>\\n<p>两点注意：</p>\\n<ol>\\n<li>表达式需要\\"函数式接口\\"的支持:  即接口中只有一个抽象方法的接口称为函数式接口,可以在接口用注解@FunctionalInterface声明,表示该接口只能有一个抽象方法</li>\\n<li>是一个匿名函数，可以让代码更加简洁明了</li>\\n</ol>\\n</blockquote>\\n<h4>1.2 四大内置函数式接口</h4>\\n<ul>\\n<li>\\n<p><code>Consumer&lt;T&gt;</code>: <code>void accept(T t);</code>  // 消费型接口,无返回值</p>\\n</li>\\n<li>\\n<p><code>Supplier&lt;T&gt;</code>: <code>T get();</code>  // 供给型接口,返回T类型</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
